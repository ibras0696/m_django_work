from fastapi import APIRouter, Depends, Header, HTTPException
from pydantic import BaseModel
from aiogram import Bot
import aiosqlite

from shemas import DuePayload
from config import INTERNAL_TOKEN
from storage import store


router = APIRouter()

@router.get("/healthz")
async def healthz():
    return {"ok": True, "service": "bot"}


@router.post("/notify-due")
async def notify_due(p: DuePayload, authorization: str = Header("")):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç backend Celery.
    –ù–∞—Ö–æ–¥–∏–º chat_id –ø–æ user_id –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å—Ç–æ—Ä–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í —ç—Ç–æ–º MVP –º—ã —Ö—Ä–∞–Ω–∏–º —Å–≤—è–∑—å chat_id <-> user_id/—Ç–æ–∫–µ–Ω—ã –ø–æ chat_id, –ø–æ—ç—Ç–æ–º—É
    –ø–µ—Ä–µ–±–µ—Ä—ë–º –∑–∞–ø–∏—Å–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) ‚Äî –æ–±—ã—á–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ map user_id -> chat_id.
    """
    if authorization != f"Bearer {INTERNAL_TOKEN}":
        raise HTTPException(status_code=401, detail="unauthorized")

    
    async with aiosqlite.connect(store.db_path) as db:
        async with db.execute("SELECT chat_id FROM auth WHERE user_id = ?", (p.user_id,)) as cur:
            rows = await cur.fetchall()

    if not rows:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ –±–æ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥–ª–æ—Ç–∏–º
        return {"ok": True, "delivered": False, "reason": "no chat bound"}

    text = (
        f"üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ\n"
        f"–ó–∞–¥–∞—á–∞: {p.title}\n"
        f"–í—Ä–µ–º—è: {p.due_at or '‚Äî'}\n"
        f"(task_id={p.task_id})"
    )
    for (chat_id,) in rows:
        try:
            await bot.send_message(chat_id, text)
        except Exception:
            # –Ω–µ –≤–∞–ª–∏–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            pass
    return {"ok": True, "delivered": True, "chat_count": len(rows)}
