from datetime import datetime, timezone
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# def fmt_task_line(t: dict) -> str:
#     """
#     –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π Markdown) –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.
#     –û–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ Django API.
#     """
#     cats = ", ".join(c.get("name", "") for c in t.get("categories", [])) or "‚Äî"
#     lines = [
#         f"‚Ä¢ [{t['id']}] {t['title']} [{t['status']}]",
#         f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats}",
#         f"  –°–æ–∑–¥–∞–Ω–æ: {t.get('created_at')}",
#         f"  –î–µ–¥–ª–∞–π–Ω: {t.get('due_at') or '‚Äî'}",
#     ]
#     return "\n".join(lines)


# def kb_task_actions(task_id: int, has_due: bool) -> InlineKeyboardMarkup:
#     """
#     –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–¥–∞—á–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º switch_inline_query_current_chat,
#     —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (/done, /cancel) –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
#     –≠—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ–≤.
#     """
#     row = [
#         InlineKeyboardButton(text="‚úÖ Done", switch_inline_query_current_chat=f"/done {task_id}"),
#     ]
#     if has_due:
#         row.append(InlineKeyboardButton(text="‚è∞ –°–Ω—è—Ç—å –¥–µ–¥–ª–∞–π–Ω", switch_inline_query_current_chat=f"/cancel {task_id}"))
#     return InlineKeyboardMarkup(inline_keyboard=[row])


def escape_md(text: str) -> str:
    """–ø—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2/Markdown (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode='Markdown')."""
    return (text or "").replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("`", "\\`")


def humanize_timedelta(td) -> str:
    secs = int(td.total_seconds())
    if secs <= 0: return "0–º"
    m, s = divmod(secs, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    parts = []
    if d: parts.append(f"{d}–¥")
    if h: parts.append(f"{h}—á")
    if m: parts.append(f"{m}–º")
    return " ".join(parts) or "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"


def fmt_task_line(t: dict) -> str:
    title = escape_md(t["title"])
    cats = ", ".join(escape_md(c["name"]) for c in t.get("categories", [])) or "‚Äî"
    created = t["created_at"]
    due = t.get("due_at") or "‚Äî"
    return (
        f"‚Ä¢ [{t['id']}] *{title}* [{t['status']}]\n"
        f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats}\n"
        f"  –°–æ–∑–¥–∞–Ω–æ: {created}\n"
        f"  –î–µ–¥–ª–∞–π–Ω: {due}"
    )


def kb_task_actions(task_id: int, has_due: bool, status: str | None = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–¥–∞—á–µ.
    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ done ‚Äî –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
    :param task_id: id –∑–∞–¥–∞—á–∏
    :param has_due: –µ—Å—Ç—å –ª–∏ –¥–µ–¥–ª–∞–π–Ω
    :param status: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å None, —Ç–æ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –Ω–µ done)
    """
    buttons = []
    if status != "done":
        buttons.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"task:done:{task_id}"))
    if has_due:
        buttons.append(InlineKeyboardButton(text="üóì –°–Ω—è—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"task:cancel:{task_id}"))
    if not buttons:
        # —Ö–æ—Ç—è –±—ã –ø—É—Å—Ç–æ–π —Ä—è–¥, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å ‚Äî –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã—à–µ
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Äî", callback_data="noop")]])
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def kb_confirm_create() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="create_confirm"),
        InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="create_cancel"),
    ]])


def fmt_task_preview(title: str, due: datetime | None) -> str:
    lines = [f"üìù *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞*", f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: *{escape_md(title)}*"]
    if due:
        now = datetime.now(timezone.utc) if due.tzinfo else datetime.utcnow()
        left = humanize_timedelta(due - now)
        lines.append(f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω: *{due.isoformat()}*  _(–æ—Å—Ç–∞–ª–æ—Å—å {left})_")
    else:
        lines.append("‚Ä¢ –î–µ–¥–ª–∞–π–Ω: *‚Äî*")
    return "\n".join(lines)


def kb_categories_page(cats: list[dict], page: int, has_prev: bool, has_next: bool, selected: set[int]):
    rows = []
    # —á–µ–∫–±–æ–∫—Å—ã
    for c in cats:
        cid = c["id"]
        checked = "‚òë" if cid in selected else "‚¨ú"
        rows.append([InlineKeyboardButton(text=f"{checked} {c['name']}", callback_data=f"cat:toggle:{cid}")])
    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    row = []
    if has_prev: row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cat:page:{page - 1}"))
    row.append(InlineKeyboardButton(text=f"–°—Ç—Ä. {page}", callback_data="noop"))
    if has_next: row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cat:page:{page + 1}"))
    rows.append(row)
    # –¥–µ–π—Å—Ç–≤–∏—è
    rows.append([
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="cat:new"),
        InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚Üí", callback_data="cat:next"),
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cat:skip"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)
