services:
  db:
    image: postgres:16
    env_file: .env.db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  backend:
    build: ./backend
    env_file: .env.backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py migrate --noinput &&
        gunicorn proj.wsgi:application -b 0.0.0.0:8000
      "

  worker:
    build: ./backend
    env_file: .env.backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: celery -A proj worker -l info

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    env_file: .env.bot
    depends_on:
      backend:
        condition: service_started
    ports:
      - "8080:8080"

  bot-tests:
    build:
      context: .
      dockerfile: bot/Dockerfile
    env_file: .env.bot
    command: sh -c "python -m unittest discover -s bot/tests -p 'test_*.py' -q"
    # tests do not require backend; run standalone

  backend-tests:
    build: ./backend
    env_file: .env.backend
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "python manage.py test"
